{"ast":null,"code":"var _jsxFileName = \"/Users/ugurcan/Desktop/projectmarathon/project-forecast/src/components/forecastDays.jsx\";\nimport React from \"react\";\nimport './forecastDays.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class ForecastDays extends React.Component {\n  dateFormatter(date) {\n    let day, month, year;\n    const splittedDate = date.split('-');\n    day = splittedDate[2];\n    month = splittedDate[1];\n    year = splittedDate[0];\n    return `${day}.${month}.${year}`;\n  }\n\n  componentDidMount() {\n    const index = Math.floor(Math.random() * 4);\n    this.setState({\n      backgroundUrl: data.landscapes[index].url\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"days\",\n        children: this.props.forecastForDays.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"day\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dayText\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"dayDate\",\n              children: this.dateFormatter(item.date)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dayInfo\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: item.day.maxtemp_c\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 27,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 28,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: item.day.condition.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 29,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n}","map":{"version":3,"sources":["/Users/ugurcan/Desktop/projectmarathon/project-forecast/src/components/forecastDays.jsx"],"names":["React","ForecastDays","Component","dateFormatter","date","day","month","year","splittedDate","split","componentDidMount","index","Math","floor","random","setState","backgroundUrl","data","landscapes","url","render","props","forecastForDays","map","item","maxtemp_c","condition","text"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,oBAAP;;;AAEA,eAAe,MAAMC,YAAN,SAA2BD,KAAK,CAACE,SAAjC,CAA2C;AACtDC,EAAAA,aAAa,CAACC,IAAD,EAAO;AAChB,QAAIC,GAAJ,EAASC,KAAT,EAAgBC,IAAhB;AACA,UAAMC,YAAY,GAAGJ,IAAI,CAACK,KAAL,CAAW,GAAX,CAArB;AACAJ,IAAAA,GAAG,GAAGG,YAAY,CAAC,CAAD,CAAlB;AACAF,IAAAA,KAAK,GAAGE,YAAY,CAAC,CAAD,CAApB;AACAD,IAAAA,IAAI,GAAGC,YAAY,CAAC,CAAD,CAAnB;AAEA,WAAQ,GAAEH,GAAI,IAAGC,KAAM,IAAGC,IAAK,EAA/B;AACH;;AACDG,EAAAA,iBAAiB,GAAE;AACf,UAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,CAAzB,CAAd;AACA,SAAKC,QAAL,CAAc;AAACC,MAAAA,aAAa,EAAEC,IAAI,CAACC,UAAL,CAAgBP,KAAhB,EAAuBQ;AAAvC,KAAd;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,6BACI;AAAK,QAAA,EAAE,EAAC,MAAR;AAAA,kBACK,KAAKC,KAAL,CAAWC,eAAX,CAA2BC,GAA3B,CAA+BC,IAAI,iBAChC;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA,iCACI;AAAK,YAAA,SAAS,EAAC,SAAf;AAAA,oCACI;AAAI,cAAA,SAAS,EAAC,SAAd;AAAA,wBAAyB,KAAKrB,aAAL,CAAmBqB,IAAI,CAACpB,IAAxB;AAAzB;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAK,cAAA,SAAS,EAAC,SAAf;AAAA,sCACI;AAAA,0BAAIoB,IAAI,CAACnB,GAAL,CAASoB;AAAb;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAA;AAAA;AAAA;AAAA,sBAFJ,eAGI;AAAA,0BAAID,IAAI,CAACnB,GAAL,CAASqB,SAAT,CAAmBC;AAAvB;AAAA;AAAA;AAAA;AAAA,sBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA;AADJ,qBADJ;AAiBH;;AAhCqD","sourcesContent":["import React from \"react\";\nimport './forecastDays.css';\n\nexport default class ForecastDays extends React.Component {\n    dateFormatter(date) {\n        let day, month, year;\n        const splittedDate = date.split('-');\n        day = splittedDate[2];\n        month = splittedDate[1];\n        year = splittedDate[0];\n\n        return `${day}.${month}.${year}`;\n    }\n    componentDidMount(){\n        const index = Math.floor(Math.random()*4);\n        this.setState({backgroundUrl: data.landscapes[index].url})\n    }\n    render() {\n        return (\n            <>\n                <div id=\"days\">\n                    {this.props.forecastForDays.map(item =>\n                        <div className=\"day\">\n                            <div className=\"dayText\">\n                                <h1 className=\"dayDate\">{this.dateFormatter(item.date)}</h1>\n                                <div className=\"dayInfo\">\n                                    <p>{item.day.maxtemp_c}</p>\n                                    <div></div>\n                                    <p>{item.day.condition.text}</p>\n                                </div>\n                            </div>\n                        </div>)}\n                </div>\n            </>\n        )\n    }\n\n}"]},"metadata":{},"sourceType":"module"}