{"ast":null,"code":"var _jsxFileName = \"/Users/ugurcan/Desktop/projectmarathon/project-forecast/src/forecast.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Header from \"./components/header\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function PassParam(props) {\n  _s();\n\n  const {\n    city\n  } = useParams();\n  return /*#__PURE__*/_jsxDEV(Forecast, {\n    city: `${city.toLowerCase()}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 13\n  }, this);\n}\n\n_s(PassParam, \"uW8xnKhvAcrV+N3B4KX6t+gA2aM=\", false, function () {\n  return [useParams];\n});\n\n_c = PassParam;\n\nclass Forecast extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      info: []\n    };\n  }\n\n  async getWeather() {\n    const weather = await fetch(`http://api.weatherapi.com/v1/search.json?key=${process.env.REACT_APP_FORECAST_API_KEY}&q=${this.props.city}\n       `).then(res => res.json());\n    this.setState({\n      info: [...weather]\n    });\n  }\n\n  checkArray() {\n    var data = \"\";\n    this.state.info[0].map(data => data = data);\n  }\n\n  componentDidMount() {\n    this.getWeather();\n    this.checkArray();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"PassParam\");","map":{"version":3,"sources":["/Users/ugurcan/Desktop/projectmarathon/project-forecast/src/forecast.jsx"],"names":["React","useParams","Header","PassParam","props","city","toLowerCase","Forecast","Component","constructor","state","info","getWeather","weather","fetch","process","env","REACT_APP_FORECAST_API_KEY","then","res","json","setState","checkArray","data","map","componentDidMount","render"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAAyB;AAAA;;AAEpC,QAAM;AAAEC,IAAAA;AAAF,MAAWJ,SAAS,EAA1B;AAEA,sBAAQ,QAAC,QAAD;AAAU,IAAA,IAAI,EAAK,GAAEI,IAAI,CAACC,WAAL,EAAmB;AAAxC;AAAA;AAAA;AAAA;AAAA,UAAR;AAEH;;GANuBH,S;UAEHF,S;;;KAFGE,S;;AAQxB,MAAMI,QAAN,SAAuBP,KAAK,CAACQ,SAA7B,CAAsC;AAClCC,EAAAA,WAAW,CAACL,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKM,KAAL,GAAW;AACPC,MAAAA,IAAI,EAAE;AADC,KAAX;AAIH;;AACe,QAAVC,UAAU,GAAE;AACf,UAAMC,OAAO,GAAG,MAAMC,KAAK,CAAE,gDAA+CC,OAAO,CAACC,GAAR,CAAYC,0BAA2B,MAAK,KAAKb,KAAL,CAAWC,IAAK;AAC/I,QADkC,CAAL,CACnBa,IADmB,CACdC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADO,CAAtB;AAGA,SAAKC,QAAL,CAAc;AAACV,MAAAA,IAAI,EAAE,CAAC,GAAGE,OAAJ;AAAP,KAAd;AAEF;;AACDS,EAAAA,UAAU,GAAE;AACR,QAAIC,IAAI,GAAG,EAAX;AACA,SAAKb,KAAL,CAAWC,IAAX,CAAgB,CAAhB,EAAmBa,GAAnB,CAAwBD,IAAD,IAAUA,IAAI,GAAGA,IAAxC;AACH;;AACDE,EAAAA,iBAAiB,GAAE;AACf,SAAKb,UAAL;AACA,SAAKU,UAAL;AACH;;AAEDI,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAA,8BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA,oBADJ;AAMH;;AA/BiC","sourcesContent":["import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Header from \"./components/header\";\n\nexport default function PassParam(props){\n\n    const { city } = useParams();\n\n    return (<Forecast city = {`${city.toLowerCase()}`} />)\n\n}\n\nclass Forecast extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            info: []\n        }\n        \n    }\n    async getWeather(){\n       const weather = await fetch(`http://api.weatherapi.com/v1/search.json?key=${process.env.REACT_APP_FORECAST_API_KEY}&q=${this.props.city}\n       `).then(res => res.json());\n\n       this.setState({info: [...weather]})\n\n    }\n    checkArray(){\n        var data = \"\";\n        this.state.info[0].map((data) => data = data)\n    }\n    componentDidMount(){\n        this.getWeather();\n        this.checkArray();\n    }\n    \n    render(){\n        return(\n            <>\n                <Header/>\n                <h1>{}</h1>\n            </>\n        )\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}