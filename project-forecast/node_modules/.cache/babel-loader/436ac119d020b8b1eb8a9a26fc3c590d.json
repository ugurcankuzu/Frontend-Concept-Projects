{"ast":null,"code":"var _jsxFileName = \"/Users/ugurcan/Desktop/projectmarathon/project-forecast/src/forecast.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Header from \"./components/header\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function PassParam(props) {\n  _s();\n\n  const {\n    city\n  } = useParams();\n  return /*#__PURE__*/_jsxDEV(Forecast, {\n    city: `${city.toLowerCase()}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 13\n  }, this);\n}\n\n_s(PassParam, \"uW8xnKhvAcrV+N3B4KX6t+gA2aM=\", false, function () {\n  return [useParams];\n});\n\n_c = PassParam;\n\nclass Forecast extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      info: \"\"\n    };\n  }\n\n  async getWeather() {\n    const weather = await fetch(`http://api.weatherapi.com/v1/forecast.json?key=${process.env.REACT_APP_FORECAST_API_KEY}&q=${this.props.city}&days=1&aqi=no&alerts=no\n        `, {\n      method: 'GET'\n    }).then(res => res.json());\n    console.log(weather);\n    this.setState({\n      info: weather\n    });\n    localStorage.clear();\n  }\n\n  componentDidMount() {\n    this.getWeather();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: JSON.parse(JSON.stringify(this.state.info.location))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"PassParam\");","map":{"version":3,"sources":["/Users/ugurcan/Desktop/projectmarathon/project-forecast/src/forecast.jsx"],"names":["React","useParams","Header","PassParam","props","city","toLowerCase","Forecast","Component","constructor","state","info","getWeather","weather","fetch","process","env","REACT_APP_FORECAST_API_KEY","method","then","res","json","console","log","setState","localStorage","clear","componentDidMount","render","JSON","parse","stringify","location"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AAErC,QAAM;AAAEC,IAAAA;AAAF,MAAWJ,SAAS,EAA1B;AAEA,sBAAQ,QAAC,QAAD;AAAU,IAAA,IAAI,EAAG,GAAEI,IAAI,CAACC,WAAL,EAAmB;AAAtC;AAAA;AAAA;AAAA;AAAA,UAAR;AAEH;;GANuBH,S;UAEHF,S;;;KAFGE,S;;AAQxB,MAAMI,QAAN,SAAuBP,KAAK,CAACQ,SAA7B,CAAuC;AACnCC,EAAAA,WAAW,CAACL,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKM,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE;AADG,KAAb;AAIH;;AACe,QAAVC,UAAU,GAAE;AACd,UAAMC,OAAO,GAAG,MAAMC,KAAK,CAAE,kDAAiDC,OAAO,CAACC,GAAR,CAAYC,0BAA2B,MAAK,KAAKb,KAAL,CAAWC,IAAK;AAClJ,SADmC,EACzB;AAACa,MAAAA,MAAM,EAAC;AAAR,KADyB,CAAL,CACJC,IADI,CACCC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADR,CAAtB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYV,OAAZ;AACA,SAAKW,QAAL,CAAc;AAACb,MAAAA,IAAI,EAAEE;AAAP,KAAd;AACAY,IAAAA,YAAY,CAACC,KAAb;AACH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKf,UAAL;AACH;;AAEDgB,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAKC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAKrB,KAAL,CAAWC,IAAX,CAAgBqB,QAA/B,CAAX;AAAL;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA,oBADJ;AAMH;;AA1BkC","sourcesContent":["import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Header from \"./components/header\";\n\nexport default function PassParam(props) {\n\n    const { city } = useParams();\n\n    return (<Forecast city={`${city.toLowerCase()}`} />)\n\n}\n\nclass Forecast extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            info: \"\"\n        }\n\n    }\n    async getWeather(){\n        const weather = await fetch(`http://api.weatherapi.com/v1/forecast.json?key=${process.env.REACT_APP_FORECAST_API_KEY}&q=${this.props.city}&days=1&aqi=no&alerts=no\n        `,{method:'GET'}).then(res => res.json());\n        console.log(weather);\n        this.setState({info: weather})\n        localStorage.clear();\n    }\n    componentDidMount() {\n        this.getWeather();\n    }\n\n    render() {\n        return (\n            <>\n                <Header />\n                <h1>{JSON.parse(JSON.stringify(this.state.info.location))}</h1>\n            </>\n        )\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}