{"ast":null,"code":"var _jsxFileName = \"/Users/ugurcan/Desktop/projectmarathon/project-forecast/src/forecast.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Header from \"./components/header\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function PassParam(props) {\n  _s();\n\n  const {\n    city\n  } = useParams();\n  return /*#__PURE__*/_jsxDEV(Forecast, {\n    city: `${city.toLowerCase()}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 13\n  }, this);\n}\n\n_s(PassParam, \"uW8xnKhvAcrV+N3B4KX6t+gA2aM=\", false, function () {\n  return [useParams];\n});\n\n_c = PassParam;\n\nclass Forecast extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      info: []\n    };\n  }\n\n  async getWeather() {\n    const weather = await fetch(`http://api.weatherapi.com/v1/search.json?key=${process.env.REACT_APP_FORECAST_API_KEY}&q=${this.props.city}\n       `, {\n      headers: {\n        'Access-Control-Allow-Origin': '*'\n      }\n    }).then(res => res.json());\n    this.setState({\n      info: weather\n    });\n  }\n\n  componentDidMount() {\n    this.getWeather();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: JSON.parse(this.state.info)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"PassParam\");","map":{"version":3,"sources":["/Users/ugurcan/Desktop/projectmarathon/project-forecast/src/forecast.jsx"],"names":["React","useParams","Header","PassParam","props","city","toLowerCase","Forecast","Component","constructor","state","info","getWeather","weather","fetch","process","env","REACT_APP_FORECAST_API_KEY","headers","then","res","json","setState","componentDidMount","render","JSON","parse"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAAyB;AAAA;;AAEpC,QAAM;AAAEC,IAAAA;AAAF,MAAWJ,SAAS,EAA1B;AAEA,sBAAQ,QAAC,QAAD;AAAU,IAAA,IAAI,EAAK,GAAEI,IAAI,CAACC,WAAL,EAAmB;AAAxC;AAAA;AAAA;AAAA;AAAA,UAAR;AAEH;;GANuBH,S;UAEHF,S;;;KAFGE,S;;AAQxB,MAAMI,QAAN,SAAuBP,KAAK,CAACQ,SAA7B,CAAsC;AAClCC,EAAAA,WAAW,CAACL,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKM,KAAL,GAAW;AACPC,MAAAA,IAAI,EAAE;AADC,KAAX;AAIH;;AACe,QAAVC,UAAU,GAAE;AACf,UAAMC,OAAO,GAAG,MAAMC,KAAK,CAAE,gDAA+CC,OAAO,CAACC,GAAR,CAAYC,0BAA2B,MAAK,KAAKb,KAAL,CAAWC,IAAK;AAC/I,QADkC,EACzB;AAACa,MAAAA,OAAO,EAAE;AACX,uCAA8B;AADnB;AAAV,KADyB,CAAL,CAGnBC,IAHmB,CAGdC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAHO,CAAtB;AAKA,SAAKC,QAAL,CAAc;AAACX,MAAAA,IAAI,EAAEE;AAAP,KAAd;AAEF;;AACDU,EAAAA,iBAAiB,GAAE;AACf,SAAKX,UAAL;AACH;;AAEDY,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAA,8BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAKC,IAAI,CAACC,KAAL,CAAW,KAAKhB,KAAL,CAAWC,IAAtB;AAAL;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA,oBADJ;AAMH;;AA5BiC","sourcesContent":["import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Header from \"./components/header\";\n\nexport default function PassParam(props){\n\n    const { city } = useParams();\n\n    return (<Forecast city = {`${city.toLowerCase()}`} />)\n\n}\n\nclass Forecast extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            info: []\n        }\n        \n    }\n    async getWeather(){\n       const weather = await fetch(`http://api.weatherapi.com/v1/search.json?key=${process.env.REACT_APP_FORECAST_API_KEY}&q=${this.props.city}\n       `,{headers: {\n        'Access-Control-Allow-Origin':'*'\n      }}).then(res => res.json());\n\n       this.setState({info: weather})\n\n    }\n    componentDidMount(){\n        this.getWeather();\n    }\n    \n    render(){\n        return(\n            <>\n                <Header/>\n                <h1>{JSON.parse(this.state.info)}</h1>\n            </>\n        )\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}